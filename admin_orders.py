#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
"""

import os
import sqlite3
import base64
from telebot import types


DATABASE = os.getenv('DATABASE', 'bot.db')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))
ORDERS_PER_PAGE = 5


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == ADMIN_ID


def register_orders_handlers(bot, user_states, user_data):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_orders")
    def admin_orders_menu(call):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        bot.answer_callback_query(call.id, "üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status = 'pending'")
        pending = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status = 'confirmed'")
        confirmed = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status = 'cancelled'")
        cancelled = cursor.fetchone()[0]
        
        conn.close()
        
        text = (
            "üõí <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ: {pending}\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ: {confirmed}\n"
            f"‚ùå –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ: {cancelled}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        )
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(f"‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ ({pending})", callback_data="admin_orders_list_pending_1"),
            types.InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ ({confirmed})", callback_data="admin_orders_list_confirmed_1"),
            types.InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ ({cancelled})", callback_data="admin_orders_list_cancelled_1"),
            types.InlineKeyboardButton("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders_list_all_1"),
            types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="admin_order_search"),
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("admin_orders_list_"))
    def admin_orders_list(call):
        """–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –ü–∞—Ä—Å–∏–º: admin_orders_list_pending_1
        parts = call.data.split("_")
        status_filter = parts[3]  # pending/confirmed/cancelled/all
        page = int(parts[4]) if len(parts) > 4 else 1
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
        if status_filter == "all":
            query = """
                SELECT o.id, o.user_id, o.status, o.created_at, 
                       p.name, i.weight_grams, i.price_rub
                FROM orders o
                JOIN inventory i ON o.inventory_id = i.id
                JOIN products p ON i.product_id = p.id
                ORDER BY o.id DESC
                LIMIT ? OFFSET ?
            """
            count_query = "SELECT COUNT(*) FROM orders"
            cursor.execute(query, (ORDERS_PER_PAGE, (page - 1) * ORDERS_PER_PAGE))
        else:
            query = """
                SELECT o.id, o.user_id, o.status, o.created_at,
                       p.name, i.weight_grams, i.price_rub
                FROM orders o
                JOIN inventory i ON o.inventory_id = i.id
                JOIN products p ON i.product_id = p.id
                WHERE o.status = ?
                ORDER BY o.id DESC
                LIMIT ? OFFSET ?
            """
            count_query = "SELECT COUNT(*) FROM orders WHERE status = ?"
            cursor.execute(query, (status_filter, ORDERS_PER_PAGE, (page - 1) * ORDERS_PER_PAGE))
        
        orders = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if status_filter == "all":
            cursor.execute(count_query)
        else:
            cursor.execute(count_query, (status_filter,))
        
        total_orders = cursor.fetchone()[0]
        conn.close()
        
        total_pages = (total_orders + ORDERS_PER_PAGE - 1) // ORDERS_PER_PAGE
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
        status_emoji = {
            "pending": "‚è≥",
            "confirmed": "‚úÖ",
            "cancelled": "‚ùå",
            "all": "üìã"
        }
        status_names = {
            "pending": "–û–∂–∏–¥–∞—é—â–∏–µ",
            "confirmed": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ",
            "cancelled": "–û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ",
            "all": "–í—Å–µ –∑–∞–∫–∞–∑—ã"
        }
        
        text = f"{status_emoji.get(status_filter, 'üìã')} <b>{status_names.get(status_filter, '–ó–∞–∫–∞–∑—ã')}</b>\n\n"
        
        if not orders:
            text += "–ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
        else:
            text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}\n\n"
        
        bot.answer_callback_query(call.id, f"{status_names.get(status_filter, '–ó–∞–∫–∞–∑—ã')}")
        
        # –°—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        for order_id, user_id, status, created_at, prod_name, weight, price in orders:
            status_icon = status_emoji.get(status, "üì¶")
            button_text = f"{status_icon} –ó–∞–∫–∞–∑ #{order_id} | {prod_name[:15]} | {price}‚ÇΩ"
            markup.add(
                types.InlineKeyboardButton(button_text, callback_data=f"admin_order_view_{order_id}")
            )
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_orders_list_{status_filter}_{page-1}")
            )
        if page < total_pages:
            nav_buttons.append(
                types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"admin_orders_list_{status_filter}_{page+1}")
            )
        
        if nav_buttons:
            markup.row(*nav_buttons)
        
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_orders"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("admin_order_view_"))
    def admin_order_view(call):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        order_id = int(call.data.split("_")[-1])
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        cursor.execute("""
            SELECT o.id, o.user_id, o.status, o.created_at, o.updated_at,
                   o.payment_proof, o.confirmed_by, o.confirmed_at, o.rejection_reason,
                   p.name, i.weight_grams, i.price_rub, i.data_encrypted,
                   c.name, d.name,
                   u.username, u.first_name
            FROM orders o
            JOIN inventory i ON o.inventory_id = i.id
            JOIN products p ON i.product_id = p.id
            JOIN cities c ON i.city_id = c.id
            JOIN districts d ON i.district_id = d.id
            LEFT JOIN users u ON o.user_id = u.user_id
            WHERE o.id = ?
        """, (order_id,))
        
        order = cursor.fetchone()
        conn.close()
        
        if not order:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        (oid, user_id, status, created_at, updated_at, payment_proof, confirmed_by, 
         confirmed_at, rejection_reason, prod_name, weight, price, encrypted_data,
         city, district, username, first_name) = order
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_emoji = {"pending": "‚è≥", "confirmed": "‚úÖ", "cancelled": "‚ùå"}
        status_names = {"pending": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "confirmed": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", "cancelled": "–û—Ç–º–µ–Ω—ë–Ω"}
        
        text = (
            f"üìã <b>–ó–∞–∫–∞–∑ #{oid}</b>\n\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji.get(status, '‚ùì')} {status_names.get(status, status)}\n\n"
            f"<b>–¢–æ–≤–∞—Ä:</b>\n"
            f"‚îú üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {prod_name}\n"
            f"‚îú ‚öñÔ∏è –í–µ—Å: {weight}–≥\n"
            f"‚îú üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
            f"‚îú üåÜ –ì–æ—Ä–æ–¥: {city}\n"
            f"‚îî üèò –†–∞–π–æ–Ω: {district}\n\n"
            f"<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b>\n"
            f"‚îú üë§ ID: {user_id}\n"
            f"‚îú üìõ –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"‚îî üîó Username: @{username if username else '–Ω–µ—Ç'}\n\n"
            f"<b>–î–∞—Ç—ã:</b>\n"
            f"‚îú üìÖ –°–æ–∑–¥–∞–Ω: {created_at[:19]}\n"
            f"‚îî üîÑ –û–±–Ω–æ–≤–ª—ë–Ω: {updated_at[:19] if updated_at else '-'}\n"
        )
        
        if status == "confirmed" and confirmed_at:
            text += f"\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: {confirmed_at[:19]}"
        
        if status == "cancelled" and rejection_reason:
            text += f"\n\n‚ùå <b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:</b>\n{rejection_reason}"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        markup = types.InlineKeyboardMarkup(row_width=2)
        
        if status == "pending":
            markup.add(
                types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_order_{oid}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_order_{oid}")
            )
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        if payment_proof:
            markup.add(types.InlineKeyboardButton("üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã", callback_data=f"admin_show_payment_{oid}"))
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        markup.add(types.InlineKeyboardButton("üîí –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞", callback_data=f"admin_show_data_{oid}"))
        
        # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        markup.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_user_profile_{user_id}"))
        
        # –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
        markup.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_delete_order_{oid}"))
        
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data=f"admin_orders_list_{status}_1"))
        
        bot.answer_callback_query(call.id, f"–ó–∞–∫–∞–∑ #{oid}")
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("admin_show_payment_"))
    def admin_show_payment(call):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        order_id = int(call.data.split("_")[-1])
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT payment_proof FROM orders WHERE id = ?", (order_id,))
        result = cursor.fetchone()
        conn.close()
        
        if not result or not result[0]:
            bot.answer_callback_query(call.id, "‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        payment_proof = result[0]
        
        bot.answer_callback_query(call.id, "üì∑ –ü–æ–∫–∞–∑—ã–≤–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç")
        
        try:
            bot.send_photo(
                call.message.chat.id,
                payment_proof,
                caption=f"üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}"
            )
        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("admin_show_data_"))
    def admin_show_data(call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        order_id = int(call.data.split("_")[-1])
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT i.data_encrypted
            FROM orders o
            JOIN inventory i ON o.inventory_id = i.id
            WHERE o.id = ?
        """, (order_id,))
        result = cursor.fetchone()
        conn.close()
        
        if not result:
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        encrypted_data = result[0]
        decrypted_data = base64.b64decode(encrypted_data.encode('utf-8')).decode('utf-8')
        
        bot.answer_callback_query(call.id, "üîì –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã")
        
        bot.send_message(
            call.message.chat.id,
            f"üîí <b>–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:</b>\n\n"
            f"<code>{decrypted_data}</code>",
            parse_mode='HTML'
        )
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_order_search")
    def admin_order_search_start(call):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        user_states[call.from_user.id] = "awaiting_order_search_id"
        
        bot.answer_callback_query(call.id, "üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_orders"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üîç <b>–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É</b>\n\n"
                 "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (ID):",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "awaiting_order_search_id")
    def admin_order_search_process(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞"""
        if not is_admin(message.from_user.id):
            return
        
        try:
            order_id = int(message.text.strip())
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
            return
        
        user_states.pop(message.from_user.id, None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM orders WHERE id = ?", (order_id,))
        exists = cursor.fetchone()
        conn.close()
        
        if not exists:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_orders"))
            bot.send_message(
                message.chat.id,
                f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=markup
            )
            return
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞
        # –ò–º–∏—Ç–∏—Ä—É–µ–º callback
        from types import SimpleNamespace
        fake_call = SimpleNamespace(
            from_user=message.from_user,
            message=message,
            id=message.message_id,
            data=f"admin_order_view_{order_id}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT o.id, o.user_id, o.status, o.created_at, o.updated_at,
                   o.payment_proof, o.confirmed_by, o.confirmed_at, o.rejection_reason,
                   p.name, i.weight_grams, i.price_rub,
                   c.name, d.name,
                   u.username, u.first_name
            FROM orders o
            JOIN inventory i ON o.inventory_id = i.id
            JOIN products p ON i.product_id = p.id
            JOIN cities c ON i.city_id = c.id
            JOIN districts d ON i.district_id = d.id
            LEFT JOIN users u ON o.user_id = u.user_id
            WHERE o.id = ?
        """, (order_id,))
        
        order = cursor.fetchone()
        conn.close()
        
        if order:
            (oid, user_id, status, created_at, updated_at, payment_proof, confirmed_by,
             confirmed_at, rejection_reason, prod_name, weight, price,
             city, district, username, first_name) = order
            
            status_emoji = {"pending": "‚è≥", "confirmed": "‚úÖ", "cancelled": "‚ùå"}
            status_names = {"pending": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "confirmed": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", "cancelled": "–û—Ç–º–µ–Ω—ë–Ω"}
            
            text = (
                f"üìã <b>–ó–∞–∫–∞–∑ #{oid}</b>\n\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji.get(status, '‚ùì')} {status_names.get(status, status)}\n\n"
                f"<b>–¢–æ–≤–∞—Ä:</b>\n"
                f"‚îú üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {prod_name}\n"
                f"‚îú ‚öñÔ∏è –í–µ—Å: {weight}–≥\n"
                f"‚îú üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
                f"‚îú üåÜ –ì–æ—Ä–æ–¥: {city}\n"
                f"‚îî üèò –†–∞–π–æ–Ω: {district}\n\n"
                f"<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b>\n"
                f"‚îú üë§ ID: {user_id}\n"
                f"‚îú üìõ –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"‚îî üîó Username: @{username if username else '–Ω–µ—Ç'}\n\n"
                f"<b>–î–∞—Ç—ã:</b>\n"
                f"‚îú üìÖ –°–æ–∑–¥–∞–Ω: {created_at[:19]}\n"
                f"‚îî üîÑ –û–±–Ω–æ–≤–ª—ë–Ω: {updated_at[:19] if updated_at else '-'}\n"
            )
            
            if status == "confirmed" and confirmed_at:
                text += f"\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: {confirmed_at[:19]}"
            
            if status == "cancelled" and rejection_reason:
                text += f"\n\n‚ùå <b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:</b>\n{rejection_reason}"
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            
            if status == "pending":
                markup.add(
                    types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_order_{oid}"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_order_{oid}")
                )
            
            if payment_proof:
                markup.add(types.InlineKeyboardButton("üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã", callback_data=f"admin_show_payment_{oid}"))
            
            markup.add(types.InlineKeyboardButton("üîí –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞", callback_data=f"admin_show_data_{oid}"))
            markup.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_user_profile_{user_id}"))
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="admin_orders"))
            
            bot.send_message(
                message.chat.id,
                text,
                parse_mode='HTML',
                reply_markup=markup
            )
