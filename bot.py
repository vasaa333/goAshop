#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram Shop Bot - –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å
–ë–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
"""

import os
import sqlite3
import base64
import logging
from dotenv import load_dotenv
import telebot
from telebot import types

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))
DATABASE = os.getenv('DATABASE', 'bot.db')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_data = {}


def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –≥–æ—Ä–æ–¥–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cities (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–π–æ–Ω–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS districts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            city_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (city_id) REFERENCES cities(id),
            UNIQUE(city_id, name)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü (–∫–ª–∞–¥—ã)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS inventory (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER NOT NULL,
            city_id INTEGER NOT NULL,
            district_id INTEGER NOT NULL,
            weight_grams INTEGER NOT NULL,
            price_rub INTEGER NOT NULL,
            data_encrypted TEXT NOT NULL,
            status TEXT DEFAULT 'available',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            sold_at TIMESTAMP,
            buyer_id INTEGER,
            FOREIGN KEY (product_id) REFERENCES products(id),
            FOREIGN KEY (city_id) REFERENCES cities(id),
            FOREIGN KEY (district_id) REFERENCES districts(id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è, –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–µ–π)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            inventory_id INTEGER NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (inventory_id) REFERENCES inventory(id)
        )
    ''')
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_inventory_status ON inventory(status)')
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_inventory_product ON inventory(product_id)')
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_inventory_city ON inventory(city_id)')
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_inventory_district ON inventory(district_id)')
    
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    try:
        from db_migration import migrate_database
        migrate_database()
    except Exception as e:
        logger.warning(f"–ú–∏–≥—Ä–∞—Ü–∏—è –ë–î –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞): {e}")


def encrypt_data(data: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (base64)"""
    return base64.b64encode(data.encode('utf-8')).decode('utf-8')


def decrypt_data(encrypted_data: str) -> str:
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    return base64.b64decode(encrypted_data.encode('utf-8')).decode('utf-8')


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_ID


# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from admin_panel import register_admin_handlers
from admin_orders import register_orders_handlers
from message_handler import register_user_handlers
from user_menu import register_user_menu_handlers
from admin_users import register_admin_users_handlers
from admin_broadcast import register_admin_broadcast_handlers
from admin_settings import register_admin_settings_handlers
from admin_logs import register_admin_logs_handlers
import db_migration

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
register_admin_handlers(bot, user_states, user_data)
register_orders_handlers(bot, user_states, user_data)
register_user_handlers(bot, user_states, user_data)
register_user_menu_handlers(bot, user_states, user_data)
register_admin_users_handlers(bot, user_states, user_data)
register_admin_broadcast_handlers(bot, user_states, user_data)
register_admin_settings_handlers(bot, user_states, user_data)
register_admin_logs_handlers(bot, user_states, user_data)


@bot.message_handler(commands=['start'])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç)
    try:
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, registration_date)
            VALUES (?, ?, ?, ?, datetime('now'))
        """, (user_id, username, first_name, message.from_user.last_name or ""))
        conn.commit()
        conn.close()
    except:
        pass  # –¢–∞–±–ª–∏—Ü–∞ users –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ä—ã—Ö –ë–î
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    if is_admin(user_id):
        markup.add(
            types.InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
            types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        )
        bot.send_message(
            message.chat.id,
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>!\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='HTML',
            reply_markup=markup
        )
    else:
        markup.add(
            types.InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
            types.InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")
        )
        markup.add(
            types.InlineKeyboardButton("‚≠êÔ∏è –û—Ç–∑—ã–≤—ã", callback_data="reviews")
        )
        markup.add(
            types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")
        )
        bot.send_message(
            message.chat.id,
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{first_name}</b>!\n\n"
            f"–Ø –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='HTML',
            reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data == "about")
def about_callback(call):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    bot.answer_callback_query(call.id, "üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n\n"
             "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
             "üìã <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
             "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞\n"
             "2. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥\n"
             "3. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω\n"
             "4. –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ\n\n"
             "üí∞ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ.",
        parse_mode='HTML',
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")
        )
    )


@bot.callback_query_handler(func=lambda call: call.data == "start")
def start_callback(call):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    bot.answer_callback_query(call.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    user_id = call.from_user.id
    first_name = call.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if is_admin(user_id):
        markup.add(
            types.InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
            types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        )
        text = f"üëã <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        markup.add(
            types.InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
            types.InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")
        )
        markup.add(
            types.InlineKeyboardButton("‚≠êÔ∏è –û—Ç–∑—ã–≤—ã", callback_data="reviews")
        )
        markup.add(
            types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")
        )
        text = f"üëã <b>{first_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        parse_mode='HTML',
        reply_markup=markup
    )


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling(timeout=60, long_polling_timeout=60)


if __name__ == '__main__':
    main()
