#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
"""

import os
import sqlite3
import base64
from telebot import types


DATABASE = os.getenv('DATABASE', 'bot.db')


def decrypt_data(encrypted_data: str) -> str:
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    return base64.b64decode(encrypted_data.encode('utf-8')).decode('utf-8')


def register_user_handlers(bot, user_states, user_data):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    # ========== –ö–ê–¢–ê–õ–û–ì –¢–û–í–ê–†–û–í ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "catalog")
    def catalog_callback(call):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        bot.answer_callback_query(call.id, "üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –Ω–∞ —Å–∫–ª–∞–¥–µ
        cursor.execute("""
            SELECT DISTINCT p.id, p.name, COUNT(i.id) as count
            FROM products p
            LEFT JOIN inventory i ON p.id = i.product_id AND i.status = 'available'
            GROUP BY p.id, p.name
            HAVING count > 0
            ORDER BY p.name
        """)
        products = cursor.fetchall()
        conn.close()
        
        if not products:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start"))
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üõç <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
                     "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏.\n"
                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ.",
                parse_mode='HTML',
                reply_markup=markup
            )
            return
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        for product_id, product_name, count in products:
            markup.add(
                types.InlineKeyboardButton(
                    f"{product_name} ({count} —à—Ç.)",
                    callback_data=f"buy_product_{product_id}"
                )
            )
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üõç <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    # ========== –ü–†–û–¶–ï–°–° –ü–û–ö–£–ü–ö–ò ==========
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("buy_product_"))
    def buy_product_callback(call):
        """–®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥–∞"""
        product_id = int(call.data.split("_")[-1])
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        cursor.execute("SELECT name FROM products WHERE id = ?", (product_id,))
        product = cursor.fetchone()
        
        if not product:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            conn.close()
            return
        
        product_name = product[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞, –≥–¥–µ –¥–æ—Å—Ç—É–ø–µ–Ω —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
        cursor.execute("""
            SELECT DISTINCT c.id, c.name, COUNT(i.id) as count
            FROM cities c
            JOIN inventory i ON c.id = i.city_id
            WHERE i.product_id = ? AND i.status = 'available'
            GROUP BY c.id, c.name
            ORDER BY c.name
        """, (product_id,))
        cities = cursor.fetchall()
        conn.close()
        
        if not cities:
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[call.from_user.id] = {
            "buy_product_id": product_id,
            "buy_product_name": product_name
        }
        
        bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä: {product_name}")
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        for city_id, city_name, count in cities:
            markup.add(
                types.InlineKeyboardButton(
                    f"{city_name} ({count} —à—Ç.)",
                    callback_data=f"buy_city_{city_id}"
                )
            )
        markup.add(
            types.InlineKeyboardButton("‚óÄÔ∏è –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üõç <b>–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                 f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n\n"
                 f"–®–∞–≥ 1/3: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("buy_city_"))
    def buy_city_callback(call):
        """–®–∞–≥ 2: –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–π–æ–Ω—ã"""
        city_id = int(call.data.split("_")[-1])
        
        data = user_data.get(call.from_user.id, {})
        product_id = data.get("buy_product_id")
        product_name = data.get("buy_product_name")
        
        if not product_id:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
            return
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        cursor.execute("SELECT name FROM cities WHERE id = ?", (city_id,))
        city = cursor.fetchone()
        
        if not city:
            bot.answer_callback_query(call.id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            conn.close()
            return
        
        city_name = city[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–π–æ–Ω—ã, –≥–¥–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–≤–∞—Ä
        cursor.execute("""
            SELECT DISTINCT d.id, d.name, COUNT(i.id) as count
            FROM districts d
            JOIN inventory i ON d.id = i.district_id
            WHERE i.product_id = ? AND i.city_id = ? AND i.status = 'available'
            GROUP BY d.id, d.name
            ORDER BY d.name
        """, (product_id, city_id))
        districts = cursor.fetchall()
        conn.close()
        
        if not districts:
            bot.answer_callback_query(call.id, "‚ùå –í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        data["buy_city_id"] = city_id
        data["buy_city_name"] = city_name
        user_data[call.from_user.id] = data
        
        bot.answer_callback_query(call.id, f"–ì–æ—Ä–æ–¥: {city_name}")
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        for district_id, district_name, count in districts:
            markup.add(
                types.InlineKeyboardButton(
                    f"{district_name} ({count} —à—Ç.)",
                    callback_data=f"buy_district_{district_id}"
                )
            )
        markup.add(
            types.InlineKeyboardButton("‚óÄÔ∏è –ö –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞", callback_data=f"buy_product_{product_id}")
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üõç <b>–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                 f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
                 f"üåÜ –ì–æ—Ä–æ–¥: {city_name}\n\n"
                 f"–®–∞–≥ 2/3: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("buy_district_"))
    def buy_district_callback(call):
        """–®–∞–≥ 3: –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π"""
        district_id = int(call.data.split("_")[-1])
        
        data = user_data.get(call.from_user.id, {})
        product_id = data.get("buy_product_id")
        product_name = data.get("buy_product_name")
        city_id = data.get("buy_city_id")
        city_name = data.get("buy_city_name")
        
        if not product_id or not city_id:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
        cursor.execute("SELECT name FROM districts WHERE id = ?", (district_id,))
        district = cursor.fetchone()
        
        if not district:
            bot.answer_callback_query(call.id, "‚ùå –†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            conn.close()
            return
        
        district_name = district[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ –° –ì–†–£–ü–ü–ò–†–û–í–ö–û–ô
        cursor.execute("""
            SELECT weight_grams, price_rub, GROUP_CONCAT(id) as ids, COUNT(*) as count
            FROM inventory
            WHERE product_id = ? AND city_id = ? AND district_id = ? AND status = 'available'
            GROUP BY weight_grams, price_rub
            ORDER BY price_rub ASC
        """, (product_id, city_id, district_id))
        items = cursor.fetchall()
        conn.close()
        
        if not items:
            bot.answer_callback_query(call.id, "‚ùå –í —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        data["buy_district_id"] = district_id
        data["buy_district_name"] = district_name
        user_data[call.from_user.id] = data
        
        bot.answer_callback_query(call.id, f"–†–∞–π–æ–Ω: {district_name}")
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        for weight, price, ids, count in items:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π ID –∏–∑ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            first_id = int(ids.split(',')[0])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
            button_text = f"‚öñÔ∏è {weight}–≥ - üí∞ {price}‚ÇΩ"
            if count > 1:
                button_text += f" (–≤ –Ω–∞–ª–∏—á–∏–∏: {count} —à—Ç.)"
            
            markup.add(
                types.InlineKeyboardButton(
                    button_text,
                    callback_data=f"buy_item_{first_id}"
                )
            )
        markup.add(
            types.InlineKeyboardButton("‚óÄÔ∏è –ö –≤—ã–±–æ—Ä—É —Ä–∞–π–æ–Ω–∞", callback_data=f"buy_city_{city_id}")
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üõç <b>–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                 f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
                 f"üåÜ –ì–æ—Ä–æ–¥: {city_name}\n"
                 f"üèò –†–∞–π–æ–Ω: {district_name}\n\n"
                 f"–®–∞–≥ 3/3: –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å –∏ —Ü–µ–Ω—É:",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("buy_item_"))
    def buy_item_callback(call):
        """–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏"""
        item_id = int(call.data.split("_")[-1])
        
        data = user_data.get(call.from_user.id, {})
        product_name = data.get("buy_product_name")
        city_name = data.get("buy_city_name")
        district_name = data.get("buy_district_name")
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
        cursor.execute("""
            SELECT weight_grams, price_rub, status
            FROM inventory
            WHERE id = ?
        """, (item_id,))
        item = cursor.fetchone()
        
        if not item:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            conn.close()
            return
        
        weight, price, status = item
        
        if status != 'available':
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω", show_alert=True)
            conn.close()
            return
        
        conn.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        data["buy_item_id"] = item_id
        data["buy_weight"] = weight
        data["buy_price"] = price
        user_data[call.from_user.id] = data
        
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data=f"confirm_buy_{item_id}"),
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data=f"buy_district_{data.get('buy_district_id')}")
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üõç <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>\n\n"
                 f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
                 f"üåÜ –ì–æ—Ä–æ–¥: {city_name}\n"
                 f"üèò –†–∞–π–æ–Ω: {district_name}\n"
                 f"‚öñÔ∏è –í–µ—Å: {weight} –≥—Ä–∞–º–º\n"
                 f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π\n\n"
                 f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_buy_"))
    def confirm_buy_callback(call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ"""
        item_id = int(call.data.split("_")[-1])
        user_id = call.from_user.id
        username = call.from_user.username or call.from_user.first_name
        
        data = user_data.get(user_id, {})
        product_name = data.get("buy_product_name")
        city_name = data.get("buy_city_name")
        district_name = data.get("buy_district_name")
        weight = data.get("buy_weight")
        price = data.get("buy_price")
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω
        cursor.execute("SELECT status FROM inventory WHERE id = ?", (item_id,))
        result = cursor.fetchone()
        
        if not result:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            conn.close()
            return
        
        status = result[0]
        
        if status != 'available':
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω", show_alert=True)
            conn.close()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
        cursor.execute("SELECT payment_instructions FROM bot_settings WHERE id = 1")
        settings = cursor.fetchone()
        payment_instructions = settings[0] if settings else "–†–µ–∫–≤–∏–∑–∏—Ç—ã –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        
        conn.close()
        
        bot.answer_callback_query(call.id, "üí≥ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ")
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üí∞ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_done_{item_id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data=f"cancel_buy_{item_id}")
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üí≥ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ</b>\n\n"
                 f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
                 f"üåÜ –ì–æ—Ä–æ–¥: {city_name}\n"
                 f"üèò –†–∞–π–æ–Ω: {district_name}\n"
                 f"‚öñÔ∏è –í–µ—Å: {weight} –≥—Ä–∞–º–º\n"
                 f"üí∞ –¶–µ–Ω–∞: <b>{price} —Ä—É–±–ª–µ–π</b>\n\n"
                 f"üìã <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
                 f"{payment_instructions}\n\n"
                 f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏.\n"
                 f"–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("payment_done_"))
    def payment_done_callback(call):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–Ø –æ–ø–ª–∞—Ç–∏–ª' - –æ–∂–∏–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç"""
        item_id = int(call.data.split("_")[-1])
        user_id = call.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = f"awaiting_payment_proof_{item_id}"
        
        bot.answer_callback_query(call.id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_buy_{item_id}"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üì∑ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ.\n"
                 "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n\n"
                 "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.message_handler(content_types=['photo'], 
                        func=lambda m: user_states.get(m.from_user.id, "").startswith("awaiting_payment_proof_"))
    def process_payment_proof(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏"""
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –ü–æ–ª—É—á–∞–µ–º item_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state = user_states.get(user_id, "")
        item_id = int(state.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º file_id —Ñ–æ—Ç–æ
        photo_file_id = message.photo[-1].file_id
        
        data = user_data.get(user_id, {})
        product_name = data.get("buy_product_name")
        city_name = data.get("buy_city_name")
        district_name = data.get("buy_district_name")
        weight = data.get("buy_weight")
        price = data.get("buy_price")
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω
        cursor.execute("SELECT status FROM inventory WHERE id = ?", (item_id,))
        result = cursor.fetchone()
        
        if not result or result[0] != 'available':
            bot.send_message(
                message.chat.id,
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            )
            user_states.pop(user_id, None)
            user_data.pop(user_id, None)
            conn.close()
            return
        
        # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä
        cursor.execute("""
            UPDATE inventory
            SET status = 'reserved', buyer_id = ?
            WHERE id = ?
        """, (user_id, item_id))
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
        cursor.execute("""
            INSERT INTO orders (user_id, inventory_id, status, payment_proof)
            VALUES (?, ?, 'pending', ?)
        """, (user_id, item_id, photo_file_id))
        
        order_id = cursor.lastrowid
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            INSERT INTO users (user_id, username, first_name, last_activity, registration_date)
            VALUES (?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            ON CONFLICT(user_id) DO UPDATE SET
                last_activity = CURRENT_TIMESTAMP
        """, (user_id, username, first_name))
        
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        cursor.execute("""
            SELECT p.name, c.name, d.name, i.weight_grams, i.price_rub
            FROM inventory i
            JOIN products p ON i.product_id = p.id
            JOIN cities c ON i.city_id = c.id
            JOIN districts d ON i.district_id = d.id
            WHERE i.id = ?
        """, (item_id,))
        
        product_info = cursor.fetchone()
        conn.close()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–∑—ã–≤–∞
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"write_review_{order_id}"),
            types.InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders"),
            types.InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
        )
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
            f"üí∞ –°—É–º–º–∞: {price} —Ä—É–±.\n\n"
            f"‚è≥ –û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 5-15 –º–∏–Ω—É—Ç.",
            parse_mode='HTML',
            reply_markup=markup
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        from bot import ADMIN_ID, bot as main_bot
        
        if product_info:
            prod_name, city, district, w, p = product_info
            
            admin_markup = types.InlineKeyboardMarkup(row_width=2)
            admin_markup.add(
                types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_order_{order_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_order_{order_id}")
            )
            admin_markup.add(
                types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_user_profile_{user_id}")
            )
            
            try:
                main_bot.send_photo(
                    ADMIN_ID,
                    photo_file_id,
                    caption=f"üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username if username else '–±–µ–∑ username'} (ID: {user_id})\n"
                            f"üì¶ –¢–æ–≤–∞—Ä: {prod_name}\n"
                            f"‚öñÔ∏è –í–µ—Å: {w}–≥\n"
                            f"üí∞ –¶–µ–Ω–∞: {p}‚ÇΩ\n"
                            f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
                            f"üèò –†–∞–π–æ–Ω: {district}\n\n"
                            f"üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –≤—ã—à–µ ‚¨ÜÔ∏è\n\n"
                            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
                    parse_mode='HTML',
                    reply_markup=admin_markup
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_buy_"))
    def cancel_buy_callback(call):
        """–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏"""
        user_id = call.from_user.id
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üõç –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
            types.InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå <b>–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                 "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É –∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.",
            parse_mode='HTML',
            reply_markup=markup
        )
