#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
"""

import os
import sqlite3
from datetime import datetime
from telebot import types
import time


DATABASE = os.getenv('DATABASE', 'bot.db')


def register_admin_broadcast_handlers(bot, user_states, user_data):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))
    
    def is_admin(user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id == ADMIN_ID
    
    
    # ========== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –†–ê–°–°–´–õ–ö–ò ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_broadcast" and is_admin(call.from_user.id))
    def admin_broadcast_callback(call):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        bot.answer_callback_query(call.id, "üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
        show_broadcast_menu(call.message)
    
    
    def show_broadcast_menu(message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM users WHERE is_blocked = 0")
        active_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM broadcasts")
        total_broadcasts = cursor.fetchone()[0]
        
        cursor.execute("""
            SELECT COUNT(*) FROM broadcasts 
            WHERE created_at > datetime('now', '-30 days')
        """)
        recent_broadcasts = cursor.fetchone()[0]
        
        conn.close()
        
        text = f"""üì¢ *–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}
‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {total_broadcasts}
‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {recent_broadcasts}

‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:*
–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_create"),
            types.InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="broadcast_history_0"),
            types.InlineKeyboardButton("‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        )
        
        bot.edit_message_text(
            text,
            message.chat.id,
            message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    # ========== –°–û–ó–î–ê–ù–ò–ï –†–ê–°–°–´–õ–ö–ò ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "broadcast_create" and is_admin(call.from_user.id))
    def broadcast_create_callback(call):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        bot.answer_callback_query(call.id)
        user_states[call.from_user.id] = "creating_broadcast"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcast"))
        
        bot.edit_message_text(
            "‚úçÔ∏è *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            "‚Ä¢ `*–∂–∏—Ä–Ω—ã–π*` ‚Üí *–∂–∏—Ä–Ω—ã–π*\n"
            "‚Ä¢ `_–∫—É—Ä—Å–∏–≤_` ‚Üí _–∫—É—Ä—Å–∏–≤_\n"
            "‚Ä¢ \\`–∫–æ–¥\\` ‚Üí `–∫–æ–¥`\n\n"
            "–ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.message_handler(func=lambda message: is_admin(message.from_user.id) and user_states.get(message.from_user.id) == "creating_broadcast")
    def handle_broadcast_text(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        text = message.text
        
        if len(text) < 10:
            bot.send_message(
                message.chat.id,
                "‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        if len(text) > 4000:
            bot.send_message(
                message.chat.id,
                "‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        user_data[message.from_user.id] = {'broadcast_text': text}
        user_states[message.from_user.id] = "confirming_broadcast"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_confirm"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcast")
        )
        
        preview_text = f"üì¢ *–ü—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        preview_text += "‚îÄ" * 30 + "\n\n"
        preview_text += text
        preview_text += "\n\n" + "‚îÄ" * 30 + "\n\n"
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users WHERE is_blocked = 0")
        recipients = cursor.fetchone()[0]
        conn.close()
        
        preview_text += f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: *{recipients}* —á–µ–ª–æ–≤–µ–∫\n\n"
        preview_text += "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ."
        
        bot.send_message(
            message.chat.id,
            preview_text,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.callback_query_handler(func=lambda call: call.data == "broadcast_confirm" and is_admin(call.from_user.id))
    def broadcast_confirm_callback(call):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        bot.answer_callback_query(call.id, "üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏...")
        
        broadcast_text = user_data.get(call.from_user.id, {}).get('broadcast_text')
        
        if not broadcast_text:
            bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(call.from_user.id, None)
        user_data.pop(call.from_user.id, None)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT user_id FROM users WHERE is_blocked = 0
        """)
        users = cursor.fetchall()
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        cursor.execute("""
            INSERT INTO broadcasts (admin_id, message_text, status, total_count, created_at)
            VALUES (?, ?, 'sending', ?, datetime('now'))
        """, (call.from_user.id, broadcast_text, len(users)))
        
        broadcast_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        bot.edit_message_text(
            f"üöÄ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!*\n\n"
            f"ID —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_id}\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
            f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown"
        )
        
        # –°—á—ë—Ç—á–∏–∫–∏
        success_count = 0
        failed_count = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for (user_id,) in users:
            try:
                bot.send_message(user_id, broadcast_text, parse_mode="Markdown")
                success_count += 1
                time.sleep(0.05)  # –ó–∞—â–∏—Ç–∞ –æ—Ç flood
            except Exception as e:
                failed_count += 1
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞
                if "bot was blocked" in str(e).lower():
                    conn = sqlite3.connect(DATABASE)
                    cursor = conn.cursor()
                    cursor.execute("UPDATE users SET is_blocked = 1 WHERE user_id = ?", (user_id,))
                    conn.commit()
                    conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE broadcasts
            SET status = 'completed', sent_count = ?, failed_count = ?, completed_at = datetime('now')
            WHERE id = ?
        """, (success_count, failed_count, broadcast_id))
        conn.commit()
        conn.close()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_broadcast"))
        
        report = f"‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
        report += f"ID —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_id}\n"
        report += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        report += f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
        report += f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {(success_count / len(users) * 100) if users else 0:.1f}%"
        
        bot.send_message(
            call.message.chat.id,
            report,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    # ========== –ò–°–¢–û–†–ò–Ø –†–ê–°–°–´–õ–û–ö ==========
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("broadcast_history_") and is_admin(call.from_user.id))
    def broadcast_history_callback(call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
        bot.answer_callback_query(call.id)
        page = int(call.data.split("_")[-1])
        show_broadcast_history(call.message, page)
    
    
    def show_broadcast_history(message, page=0):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM broadcasts")
        total = cursor.fetchone()[0]
        
        if total == 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast"))
            
            bot.edit_message_text(
                "üìã *–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫*\n\n–†–∞—Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.",
                message.chat.id,
                message.message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )
            conn.close()
            return
        
        per_page = 5
        offset = page * per_page
        
        cursor.execute("""
            SELECT id, message_text, status, total_count, sent_count, failed_count, created_at
            FROM broadcasts
            ORDER BY created_at DESC
            LIMIT ? OFFSET ?
        """, (per_page, offset))
        broadcasts = cursor.fetchall()
        conn.close()
        
        text = f"üìã *–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫*\n"
        text += f"–í—Å–µ–≥–æ: {total} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}\n\n"
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        status_emoji = {
            'sending': '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞',
            'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'failed': '‚ùå –û—à–∏–±–∫–∞'
        }
        
        for broadcast_id, msg, status, total_users, sent_count, failed_count, created_at in broadcasts:
            date = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
            status_text = status_emoji.get(status, status)
            
            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
            short_msg = msg[:30] + "..." if len(msg) > 30 else msg
            short_msg = short_msg.replace('\n', ' ')
            
            button_text = f"{status_text} | ‚Ññ{broadcast_id} | {date}"
            markup.add(types.InlineKeyboardButton(
                button_text,
                callback_data=f"broadcast_view_{broadcast_id}"
            ))
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = []
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"broadcast_history_{page-1}"))
        if (page + 1) * per_page < total:
            nav_buttons.append(types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"broadcast_history_{page+1}"))
        
        if nav_buttons:
            markup.row(*nav_buttons)
        
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_broadcast"))
        
        bot.edit_message_text(
            text,
            message.chat.id,
            message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("broadcast_view_") and is_admin(call.from_user.id))
    def broadcast_view_callback(call):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
        bot.answer_callback_query(call.id)
        broadcast_id = int(call.data.split("_")[-1])
        show_broadcast_details(call.message, broadcast_id)
    
    
    def show_broadcast_details(message, broadcast_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT id, admin_id, message_text, status, total_users, sent_count, 
                   failed_count, created_at, completed_at
            FROM broadcasts
            WHERE id = ?
        """, (broadcast_id,))
        broadcast = cursor.fetchone()
        conn.close()
        
        if not broadcast:
            bot.answer_callback_query(message.chat.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        b_id, admin_id, msg, status, total_users, sent_count, failed_count, created_at, completed_at = broadcast
        
        status_emoji = {
            'sending': '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞',
            'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'failed': '‚ùå –û—à–∏–±–∫–∞'
        }
        
        text = f"üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ ‚Ññ{b_id}*\n\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji.get(status, status)}\n"
        text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {datetime.fromisoformat(created_at).strftime('%d.%m.%Y %H:%M')}\n"
        
        if completed_at:
            text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.fromisoformat(completed_at).strftime('%d.%m.%Y %H:%M')}\n"
        
        text += f"\nüìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        text += f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users}\n"
        text += f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count or 0}\n"
        text += f"‚Ä¢ –û—à–∏–±–æ–∫: {failed_count or 0}\n"
        
        if total_users and sent_count:
            delivery_rate = (sent_count / total_users) * 100
            text += f"‚Ä¢ –î–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç—å: {delivery_rate:.1f}%\n"
        
        text += f"\nüìù *–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:*\n"
        text += "‚îÄ" * 30 + "\n"
        text += msg[:500] + ("..." if len(msg) > 500 else "")
        text += "\n" + "‚îÄ" * 30
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö –∏—Å—Ç–æ—Ä–∏–∏", callback_data="broadcast_history_0"))
        markup.add(types.InlineKeyboardButton("üè† –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_broadcast"))
        
        bot.edit_message_text(
            text,
            message.chat.id,
            message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
