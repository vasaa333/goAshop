#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏, –≥–æ—Ä–æ–¥–∞–º–∏, —Ä–∞–π–æ–Ω–∞–º–∏ –∏ —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
"""

import os
import sqlite3
import base64
from telebot import types


DATABASE = os.getenv('DATABASE', 'bot.db')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == ADMIN_ID


def encrypt_data(data: str) -> str:
    """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    return base64.b64encode(data.encode('utf-8')).decode('utf-8')


def register_admin_handlers(bot, user_states, user_data):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_panel")
    def admin_panel_callback(call):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        bot.answer_callback_query(call.id, "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        users_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status = 'pending'")
        pending_orders = cursor.fetchone()[0]
        conn.close()
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            types.InlineKeyboardButton("üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products_menu")
        )
        markup.add(
            types.InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑—ã", callback_data="admin_orders"),
            types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        )
        markup.add(
            types.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
            types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        )
        markup.add(
            types.InlineKeyboardButton("üìú –õ–æ–≥–∏", callback_data="admin_logs"),
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="start")
        )
        
        text = (
            "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            f"‚è≥ –ó–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {pending_orders}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    # ========== –ü–û–î–ú–ï–ù–Æ: –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_products_menu")
    def admin_products_menu_callback(call):
        """–ü–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        bot.answer_callback_query(call.id, "üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product"),
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="admin_add_city")
        )
        markup.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–π–æ–Ω", callback_data="admin_add_district"),
            types.InlineKeyboardButton("üì¶ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫–ª–∞–¥", callback_data="admin_add_inventory")
        )
        markup.add(
            types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="admin_list_products"),
            types.InlineKeyboardButton("üåÜ –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤", callback_data="admin_list_cities")
        )
        markup.add(
            types.InlineKeyboardButton("üèò –°–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤", callback_data="admin_list_districts"),
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üõí <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
                 "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                 "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
                 "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ—Ä–æ–¥–∞–º–∏ –∏ —Ä–∞–π–æ–Ω–∞–º–∏\n"
                 "‚Ä¢ –ü–æ–ø–æ–ª–Ω—è—Ç—å —Å–∫–ª–∞–¥ —Ç–æ–≤–∞—Ä–∞–º–∏\n"
                 "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    # ========== –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_add_product")
    def admin_add_product_callback(call):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        bot.answer_callback_query(call.id, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        user_states[call.from_user.id] = "awaiting_product_name"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                 "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "awaiting_product_name")
    def process_product_name(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        if not is_admin(message.from_user.id):
            return
        
        product_name = message.text.strip()
        
        if not product_name:
            bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        try:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            cursor.execute("INSERT INTO products (name) VALUES (?)", (product_name,))
            conn.commit()
            conn.close()
            
            user_states.pop(message.from_user.id, None)
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="admin_add_product"),
                types.InlineKeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
            )
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}",
                parse_mode='HTML',
                reply_markup=markup
            )
        except sqlite3.IntegrityError:
            bot.send_message(
                message.chat.id,
                f"‚ùå –¢–æ–≤–∞—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{product_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
                )
            )
            user_states.pop(message.from_user.id, None)
    
    # ========== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ì–û–†–û–î–ê ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_add_city")
    def admin_add_city_callback(call):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        bot.answer_callback_query(call.id, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
        user_states[call.from_user.id] = "awaiting_city_name"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞</b>\n\n"
                 "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "awaiting_city_name")
    def process_city_name(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
        if not is_admin(message.from_user.id):
            return
        
        city_name = message.text.strip()
        
        if not city_name:
            bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        try:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            cursor.execute("INSERT INTO cities (name) VALUES (?)", (city_name,))
            conn.commit()
            conn.close()
            
            user_states.pop(message.from_user.id, None)
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="admin_add_city"),
                types.InlineKeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
            )
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ <b>–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üåÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {city_name}",
                parse_mode='HTML',
                reply_markup=markup
            )
        except sqlite3.IntegrityError:
            bot.send_message(
                message.chat.id,
                f"‚ùå –ì–æ—Ä–æ–¥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{city_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
                )
            )
            user_states.pop(message.from_user.id, None)
    
    # ========== –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ê–ô–û–ù–ê ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_add_district")
    def admin_add_district_callback(call):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞ - –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM cities ORDER BY name")
        cities = cursor.fetchall()
        conn.close()
        
        if not cities:
            bot.answer_callback_query(call.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥–∞!", show_alert=True)
            return
        
        bot.answer_callback_query(call.id, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞")
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        for city_id, city_name in cities:
            markup.add(
                types.InlineKeyboardButton(
                    city_name,
                    callback_data=f"admin_district_city_{city_id}"
                )
            )
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–π–æ–Ω–∞</b>\n\n"
                 "–®–∞–≥ 1/2: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("admin_district_city_"))
    def admin_district_city_selected(call):
        """–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ –¥–ª—è —Ä–∞–π–æ–Ω–∞"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        city_id = int(call.data.split("_")[-1])
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM cities WHERE id = ?", (city_id,))
        city = cursor.fetchone()
        conn.close()
        
        if not city:
            bot.answer_callback_query(call.id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        city_name = city[0]
        user_data[call.from_user.id] = {"district_city_id": city_id, "district_city_name": city_name}
        user_states[call.from_user.id] = "awaiting_district_name"
        
        bot.answer_callback_query(call.id, f"–ì–æ—Ä–æ–¥: {city_name}")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–π–æ–Ω–∞</b>\n\n"
                 f"üåÜ –ì–æ—Ä–æ–¥: {city_name}\n\n"
                 f"–®–∞–≥ 2/2: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞:",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "awaiting_district_name")
    def process_district_name(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–π–æ–Ω–∞"""
        if not is_admin(message.from_user.id):
            return
        
        district_name = message.text.strip()
        
        if not district_name:
            bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        data = user_data.get(message.from_user.id, {})
        city_id = data.get("district_city_id")
        city_name = data.get("district_city_name")
        
        if not city_id:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω")
            user_states.pop(message.from_user.id, None)
            user_data.pop(message.from_user.id, None)
            return
        
        try:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            cursor.execute("INSERT INTO districts (city_id, name) VALUES (?, ?)", (city_id, district_name))
            conn.commit()
            conn.close()
            
            user_states.pop(message.from_user.id, None)
            user_data.pop(message.from_user.id, None)
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="admin_add_district"),
                types.InlineKeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
            )
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ <b>–†–∞–π–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üåÜ –ì–æ—Ä–æ–¥: {city_name}\n"
                f"üèò –†–∞–π–æ–Ω: {district_name}",
                parse_mode='HTML',
                reply_markup=markup
            )
        except sqlite3.IntegrityError:
            bot.send_message(
                message.chat.id,
                f"‚ùå –†–∞–π–æ–Ω '{district_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ '{city_name}'!",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
                )
            )
            user_states.pop(message.from_user.id, None)
            user_data.pop(message.from_user.id, None)
    
    # ========== –ü–û–ü–û–õ–ù–ï–ù–ò–ï –°–ö–õ–ê–î–ê (–ü–û–®–ê–ì–û–í–´–ô –ü–†–û–¶–ï–°–°) ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_add_inventory")
    def admin_add_inventory_callback(call):
        """–®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM products ORDER BY name")
        products = cursor.fetchall()
        conn.close()
        
        if not products:
            bot.answer_callback_query(call.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã!", show_alert=True)
            return
        
        bot.answer_callback_query(call.id, "üì¶ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞")
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        for product_id, product_name in products:
            markup.add(
                types.InlineKeyboardButton(
                    product_name,
                    callback_data=f"inv_product_{product_id}"
                )
            )
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üì¶ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞</b>\n\n"
                 "–®–∞–≥ 1/5: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("inv_product_"))
    def inventory_product_selected(call):
        """–¢–æ–≤–∞—Ä –≤—ã–±—Ä–∞–Ω, –∑–∞–ø—Ä–æ—Å –≤–µ—Å–∞ –∏ —Ü–µ–Ω—ã"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        product_id = int(call.data.split("_")[-1])
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM products WHERE id = ?", (product_id,))
        product = cursor.fetchone()
        conn.close()
        
        if not product:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        product_name = product[0]
        user_data[call.from_user.id] = {"inv_product_id": product_id, "inv_product_name": product_name}
        user_states[call.from_user.id] = "awaiting_inventory_weight_price"
        
        bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä: {product_name}")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üì¶ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞</b>\n\n"
                 f"–¢–æ–≤–∞—Ä: {product_name}\n\n"
                 f"–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö –∏ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '|'\n\n"
                 f"–ü—Ä–∏–º–µ—Ä: 100|5000\n"
                 f"(100 –≥—Ä–∞–º–º –∑–∞ 5000 —Ä—É–±–ª–µ–π)",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "awaiting_inventory_weight_price")
    def process_inventory_weight_price(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞ –∏ —Ü–µ–Ω—ã"""
        if not is_admin(message.from_user.id):
            return
        
        text = message.text.strip()
        
        if '|' not in text:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –≤–µ—Å_–≤_–≥—Ä–∞–º–º–∞—Ö|—Ü–µ–Ω–∞_–≤_—Ä—É–±–ª—è—Ö\n"
                "–ü—Ä–∏–º–µ—Ä: 100|5000"
            )
            return
        
        try:
            weight_str, price_str = text.split('|', 1)
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤ - –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
            weight_str = weight_str.strip().replace(',', '.')
            weight = float(weight_str)
            price_rub = int(price_str.strip())
            
            if weight <= 0 or price_rub <= 0:
                raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å –∫–∞–∫ –µ—Å—Ç—å (–º–æ–∂–µ—Ç –±—ã—Ç—å 0.25, 0.5, 100 –∏ —Ç.–¥.)
            data = user_data.get(message.from_user.id, {})
            data['inv_weight'] = weight
            data['inv_price'] = price_rub
            user_data[message.from_user.id] = data
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            cursor.execute("SELECT id, name FROM cities ORDER BY name")
            cities = cursor.fetchall()
            conn.close()
            
            if not cities:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥–∞.",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
                    )
                )
                user_states.pop(message.from_user.id, None)
                user_data.pop(message.from_user.id, None)
                return
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            for city_id, city_name in cities:
                markup.add(
                    types.InlineKeyboardButton(
                        city_name,
                        callback_data=f"inv_city_{city_id}"
                    )
                )
            markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
            
            bot.send_message(
                message.chat.id,
                f"üì¶ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞</b>\n\n"
                f"–¢–æ–≤–∞—Ä: {data.get('inv_product_name')}\n"
                f"–í–µ—Å: {weight} –≥—Ä–∞–º–º\n"
                f"–¶–µ–Ω–∞: {price_rub} —Ä—É–±.\n\n"
                f"–®–∞–≥ 3/5: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
                parse_mode='HTML',
                reply_markup=markup
            )
            
            user_states[message.from_user.id] = "inventory_selecting_city"
            
        except (ValueError, IndexError):
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '|'\n"
                "–ü—Ä–∏–º–µ—Ä: 100|5000"
            )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("inv_city_") and user_states.get(call.from_user.id) == "inventory_selecting_city")
    def inventory_city_selected(call):
        """–ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω, –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        city_id = int(call.data.split("_")[-1])
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM cities WHERE id = ?", (city_id,))
        city = cursor.fetchone()
        
        if not city:
            bot.answer_callback_query(call.id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            conn.close()
            return
        
        city_name = city[0]
        
        cursor.execute("SELECT id, name FROM districts WHERE city_id = ? ORDER BY name", (city_id,))
        districts = cursor.fetchall()
        conn.close()
        
        if not districts:
            bot.answer_callback_query(call.id, "‚ùå –í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç —Ä–∞–π–æ–Ω–æ–≤!", show_alert=True)
            return
        
        data = user_data.get(call.from_user.id, {})
        data['inv_city_id'] = city_id
        data['inv_city_name'] = city_name
        user_data[call.from_user.id] = data
        
        bot.answer_callback_query(call.id, f"–ì–æ—Ä–æ–¥: {city_name}")
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        for district_id, district_name in districts:
            markup.add(
                types.InlineKeyboardButton(
                    district_name,
                    callback_data=f"inv_district_{district_id}"
                )
            )
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üì¶ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞</b>\n\n"
                 f"–¢–æ–≤–∞—Ä: {data.get('inv_product_name')}\n"
                 f"–í–µ—Å: {data.get('inv_weight')} –≥—Ä–∞–º–º\n"
                 f"–¶–µ–Ω–∞: {data.get('inv_price')} —Ä—É–±.\n"
                 f"–ì–æ—Ä–æ–¥: {city_name}\n\n"
                 f"–®–∞–≥ 4/5: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
            parse_mode='HTML',
            reply_markup=markup
        )
        
        user_states[call.from_user.id] = "inventory_selecting_district"
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("inv_district_") and user_states.get(call.from_user.id) == "inventory_selecting_district")
    def inventory_district_selected(call):
        """–†–∞–π–æ–Ω –≤—ã–±—Ä–∞–Ω, –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        district_id = int(call.data.split("_")[-1])
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM districts WHERE id = ?", (district_id,))
        district = cursor.fetchone()
        conn.close()
        
        if not district:
            bot.answer_callback_query(call.id, "‚ùå –†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        district_name = district[0]
        
        data = user_data.get(call.from_user.id, {})
        data['inv_district_id'] = district_id
        data['inv_district_name'] = district_name
        user_data[call.from_user.id] = data
        
        bot.answer_callback_query(call.id, f"–†–∞–π–æ–Ω: {district_name}")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üì¶ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞</b>\n\n"
                 f"–¢–æ–≤–∞—Ä: {data.get('inv_product_name')}\n"
                 f"–í–µ—Å: {data.get('inv_weight')} –≥—Ä–∞–º–º\n"
                 f"–¶–µ–Ω–∞: {data.get('inv_price')} —Ä—É–±.\n"
                 f"–ì–æ—Ä–æ–¥: {data.get('inv_city_name')}\n"
                 f"–†–∞–π–æ–Ω: {district_name}\n\n"
                 f"–®–∞–≥ 5/5: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞\n"
                 f"(–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ —Ç.–¥.):",
            parse_mode='HTML',
            reply_markup=markup
        )
        
        user_states[call.from_user.id] = "awaiting_inventory_data"
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "awaiting_inventory_data")
    def process_inventory_data(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
        if not is_admin(message.from_user.id):
            return
        
        inventory_data_text = message.text.strip()
        
        if not inventory_data_text:
            bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        data = user_data.get(message.from_user.id, {})
        
        product_id = data.get('inv_product_id')
        product_name = data.get('inv_product_name')
        weight = data.get('inv_weight')
        price = data.get('inv_price')
        city_id = data.get('inv_city_id')
        city_name = data.get('inv_city_name')
        district_id = data.get('inv_district_id')
        district_name = data.get('inv_district_name')
        
        # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        encrypted_data = encrypt_data(inventory_data_text)
        
        try:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            cursor.execute(
                """INSERT INTO inventory 
                   (product_id, city_id, district_id, weight_grams, price_rub, data_encrypted, status)
                   VALUES (?, ?, ?, ?, ?, ?, 'available')""",
                (product_id, city_id, district_id, weight, price, encrypted_data)
            )
            inventory_id = cursor.lastrowid
            conn.commit()
            conn.close()
            
            user_states.pop(message.from_user.id, None)
            user_data.pop(message.from_user.id, None)
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="admin_add_inventory"),
                types.InlineKeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
            )
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥!</b>\n\n"
                f"ID: #{inventory_id}\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
                f"‚öñÔ∏è –í–µ—Å: {weight} –≥—Ä–∞–º–º\n"
                f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                f"üåÜ –ì–æ—Ä–æ–¥: {city_name}\n"
                f"üèò –†–∞–π–æ–Ω: {district_name}\n"
                f"üîí –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã",
                parse_mode='HTML',
                reply_markup=markup
            )
        except Exception as e:
            bot.send_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {str(e)}",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
                )
            )
            user_states.pop(message.from_user.id, None)
            user_data.pop(message.from_user.id, None)
    
    # ========== –°–ü–ò–°–ö–ò –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_list_products")
    def admin_list_products_callback(call):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        bot.answer_callback_query(call.id, "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT id, name, created_at FROM products ORDER BY name")
        products = cursor.fetchall()
        conn.close()
        
        if not products:
            text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
            for i, (prod_id, name, created) in enumerate(products, 1):
                text += f"{i}. {name} (ID: {prod_id})\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_list_cities")
    def admin_list_cities_callback(call):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        bot.answer_callback_query(call.id, "üåÜ –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤")
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM cities ORDER BY name")
        cities = cursor.fetchall()
        conn.close()
        
        if not cities:
            text = "üåÜ <b>–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤</b>\n\n–ì–æ—Ä–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = "üåÜ <b>–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤</b>\n\n"
            for i, (city_id, name) in enumerate(cities, 1):
                text += f"{i}. {name} (ID: {city_id})\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_list_districts")
    def admin_list_districts_callback(call):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–π–æ–Ω–æ–≤"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        bot.answer_callback_query(call.id, "üèò –°–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤")
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT d.id, d.name, c.name 
            FROM districts d
            JOIN cities c ON d.city_id = c.id
            ORDER BY c.name, d.name
        """)
        districts = cursor.fetchall()
        conn.close()
        
        if not districts:
            text = "üèò <b>–°–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤</b>\n\n–†–∞–π–æ–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = "üèò <b>–°–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤</b>\n\n"
            for i, (dist_id, dist_name, city_name) in enumerate(districts, 1):
                text += f"{i}. {city_name} - {dist_name} (ID: {dist_id})\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_stats")
    def admin_stats_callback(call):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        bot.answer_callback_query(call.id, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM products")
        products_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM cities")
        cities_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM districts")
        districts_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM inventory WHERE status = 'available'")
        available_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM inventory WHERE status = 'sold'")
        sold_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM orders")
        orders_count = cursor.fetchone()[0]
        
        # –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status = 'pending'")
        pending_orders = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status = 'confirmed'")
        confirmed_orders = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM orders WHERE status = 'cancelled'")
        cancelled_orders = cursor.fetchone()[0]
        
        conn.close()
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {products_count}\n"
            f"üåÜ –ì–æ—Ä–æ–¥–æ–≤: {cities_count}\n"
            f"üèò –†–∞–π–æ–Ω–æ–≤: {districts_count}\n\n"
            f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {available_count}\n"
            f"üí∞ –ü—Ä–æ–¥–∞–Ω–æ: {sold_count}\n"
            f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {orders_count}\n\n"
            f"<b>–ó–∞–∫–∞–∑—ã:</b>\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pending_orders}\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: {confirmed_orders}\n"
            f"‚ùå –û—Ç–º–µ–Ω–µ–Ω—ã: {cancelled_orders}"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    # ========== –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø/–û–¢–ö–õ–û–ù–ï–ù–ò–Ø –ó–ê–ö–ê–ó–û–í ==========
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("admin_confirm_order_"))
    def admin_confirm_order_callback(call):
        """–ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        order_id = int(call.data.split("_")[-1])
        admin_id = call.from_user.id
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        cursor.execute("""
            SELECT o.user_id, o.inventory_id, o.status, 
                   i.data_encrypted, p.name, i.weight_grams, i.price_rub
            FROM orders o
            JOIN inventory i ON o.inventory_id = i.id
            JOIN products p ON i.product_id = p.id
            WHERE o.id = ?
        """, (order_id,))
        
        order_data = cursor.fetchone()
        
        if not order_data:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            conn.close()
            return
        
        user_id, inv_id, status, encrypted_data, prod_name, weight, price = order_data
        
        if status != 'pending':
            bot.answer_callback_query(call.id, "‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
            conn.close()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        cursor.execute("""
            UPDATE orders
            SET status = 'confirmed', confirmed_by = ?, confirmed_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (admin_id, order_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
        cursor.execute("""
            UPDATE inventory
            SET status = 'sold', sold_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (inv_id,))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            UPDATE users
            SET total_orders = total_orders + 1, total_spent = total_spent + ?
            WHERE user_id = ?
        """, (price, user_id))
        
        conn.commit()
        conn.close()
        
        bot.answer_callback_query(call.id, "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption=f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</b>\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞.",
            parse_mode='HTML'
        )
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        decrypted_data = base64.b64decode(encrypted_data.encode('utf-8')).decode('utf-8')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders"),
            types.InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"leave_review_{order_id}"),
            types.InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
        )
        
        try:
            bot.send_message(
                user_id,
                f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                f"–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {prod_name}\n"
                f"‚öñÔ∏è –í–µ—Å: {weight}–≥\n"
                f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n\n"
                f"üìç <b>–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:</b>\n"
                f"<code>{decrypted_data}</code>\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ",
                parse_mode='HTML',
                reply_markup=markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("admin_reject_order_"))
    def admin_reject_order_callback(call):
        """–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ - –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã"""
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        order_id = int(call.data.split("_")[-1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[call.from_user.id] = f"awaiting_rejection_reason_{order_id}"
        
        bot.answer_callback_query(call.id, "‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
        
        bot.send_message(
            call.message.chat.id,
            f"üìù <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n"
            f"–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            parse_mode='HTML'
        )
    
    @bot.message_handler(func=lambda m: user_states.get(m.from_user.id, "").startswith("awaiting_rejection_reason_"))
    def process_rejection_reason(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
        if not is_admin(message.from_user.id):
            return
        
        admin_id = message.from_user.id
        state = user_states.get(admin_id, "")
        order_id = int(state.split("_")[-1])
        reason = message.text.strip()
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        cursor.execute("""
            SELECT user_id, inventory_id, status
            FROM orders
            WHERE id = ?
        """, (order_id,))
        
        order_data = cursor.fetchone()
        
        if not order_data:
            bot.send_message(message.chat.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            user_states.pop(admin_id, None)
            conn.close()
            return
        
        user_id, inv_id, status = order_data
        
        if status != 'pending':
            bot.send_message(message.chat.id, "‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            user_states.pop(admin_id, None)
            conn.close()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        cursor.execute("""
            UPDATE orders
            SET status = 'cancelled', rejection_reason = ?, updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (reason, order_id))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä –≤ available
        cursor.execute("""
            UPDATE inventory
            SET status = 'available', buyer_id = NULL
            WHERE id = ?
        """, (inv_id,))
        
        conn.commit()
        conn.close()
        
        user_states.pop(admin_id, None)
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π."
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üõç –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
            types.InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="create_ticket"),
            types.InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
        )
        
        try:
            bot.send_message(
                user_id,
                f"‚ùå <b>–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b>\n{reason}\n\n"
                f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode='HTML',
                reply_markup=markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    
    # ========== –ú–û–î–ï–†–ê–¶–ò–Ø –û–¢–ó–´–í–û–í ==========
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("approve_review_") and is_admin(call.from_user.id))
    def approve_review_callback(call):
        """–û–¥–æ–±—Ä–∏—Ç—å –æ—Ç–∑—ã–≤"""
        review_id = int(call.data.split("_")[-1])
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute("""
            UPDATE reviews
            SET is_approved = 1
            WHERE id = ?
        """, (review_id,))
        
        conn.commit()
        conn.close()
        
        bot.edit_message_text(
            f"‚úÖ –û—Ç–∑—ã–≤ #{review_id} –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!",
            call.message.chat.id,
            call.message.message_id
        )
        bot.answer_callback_query(call.id, "‚úÖ –û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω")
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("reject_review_") and is_admin(call.from_user.id))
    def reject_review_callback(call):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤"""
        review_id = int(call.data.split("_")[-1])
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute("""
            DELETE FROM reviews
            WHERE id = ?
        """, (review_id,))
        
        conn.commit()
        conn.close()
        
        bot.edit_message_text(
            f"‚ùå –û—Ç–∑—ã–≤ #{review_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω.",
            call.message.chat.id,
            call.message.message_id
        )
        bot.answer_callback_query(call.id, "‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω")
