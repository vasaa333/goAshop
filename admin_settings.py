#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø)
"""

import os
import sqlite3
import json
from datetime import datetime
from telebot import types


DATABASE = os.getenv('DATABASE', 'bot.db')


def register_admin_settings_handlers(bot, user_states, user_data):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    
    ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))
    
    def is_admin(user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id == ADMIN_ID
    
    
    def get_setting(key, default=''):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        try:
            cursor.execute(f"SELECT {key} FROM bot_settings WHERE id = 1")
            result = cursor.fetchone()
            conn.close()
            return str(result[0]) if result and result[0] is not None else default
        except Exception as e:
            conn.close()
            return default
    
    
    def set_setting(key, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        try:
            cursor.execute(f"""
                UPDATE bot_settings 
                SET {key} = ?, updated_at = datetime('now')
                WHERE id = 1
            """, (value,))
            conn.commit()
        except Exception as e:
            pass
        finally:
            conn.close()
    
    
    # ========== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_settings" and is_admin(call.from_user.id))
    def admin_settings_callback(call):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        bot.answer_callback_query(call.id, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
        show_settings_menu(call.message)
    
    
    def show_settings_menu(message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        maintenance = get_setting('maintenance_mode', '0')
        captcha = get_setting('captcha_enabled', '0')
        support_username = get_setting('support_username', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        
        maint_status = "üü¢ –í–∫–ª" if maintenance == '1' else "üî¥ –í—ã–∫–ª"
        captcha_status = "üü¢ –í–∫–ª" if captcha == '1' else "üî¥ –í—ã–∫–ª"
        
        text = f"""‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*

üîß *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*

üõ† –¢–µ—Ö.—Ä–∞–±–æ—Ç—ã: {maint_status}
ü§ñ –ö–∞–ø—á–∞: {captcha_status}
ü™¨ –ö–æ–Ω—Ç–∞–∫—Ç —Å–∞–ø–ø–æ—Ä—Ç–∞: @{support_username}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(f"üõ† –¢–µ—Ö.—Ä–∞–±–æ—Ç—ã: {maint_status}", callback_data="toggle_maintenance"),
            types.InlineKeyboardButton(f"ü§ñ –ö–∞–ø—á–∞: {captcha_status}", callback_data="toggle_captcha"),
            types.InlineKeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞", callback_data="settings_welcome"),
            types.InlineKeyboardButton("üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã", callback_data="settings_payment"),
            types.InlineKeyboardButton("ü™¨ –ö–æ–Ω—Ç–∞–∫—Ç —Å–∞–ø–ø–æ—Ä—Ç–∞", callback_data="settings_support"),
            types.InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", callback_data="settings_view_all"),
            types.InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª", callback_data="settings_export"),
            types.InlineKeyboardButton("üì≤ –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞", callback_data="settings_import"),
            types.InlineKeyboardButton("‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        )
        
        bot.edit_message_text(
            text,
            message.chat.id,
            message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    # ========== –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–ò ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "toggle_maintenance" and is_admin(call.from_user.id))
    def toggle_maintenance_callback(call):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ç–µ—Ö.—Ä–∞–±–æ—Ç"""
        current = get_setting('maintenance_mode', '0')
        new_value = '0' if current == '1' else '1'
        set_setting('maintenance_mode', new_value)
        
        status = "–≤–∫–ª—é—á—ë–Ω" if new_value == '1' else "–≤—ã–∫–ª—é—á–µ–Ω"
        bot.answer_callback_query(call.id, f"üõ† –†–µ–∂–∏–º —Ç–µ—Ö.—Ä–∞–±–æ—Ç {status}")
        show_settings_menu(call.message)
    
    
    @bot.callback_query_handler(func=lambda call: call.data == "toggle_captcha" and is_admin(call.from_user.id))
    def toggle_captcha_callback(call):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É"""
        current = get_setting('captcha_enabled', '0')
        new_value = '0' if current == '1' else '1'
        set_setting('captcha_enabled', new_value)
        
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_value == '1' else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        bot.answer_callback_query(call.id, f"ü§ñ –ö–∞–ø—á–∞ {status}")
        show_settings_menu(call.message)
    
    
    # ========== –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –ë–û–¢–ê ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "settings_welcome" and is_admin(call.from_user.id))
    def settings_welcome_callback(call):
        """–ú–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        bot.answer_callback_query(call.id)
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="welcome_change_text"),
            types.InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data="welcome_change_media"),
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")
        )
        
        current_text = get_setting('welcome_text', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
        
        bot.edit_message_text(
            f"üëã *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞*\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n{current_text[:200]}...\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.callback_query_handler(func=lambda call: call.data == "welcome_change_text" and is_admin(call.from_user.id))
    def welcome_change_text_callback(call):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        bot.answer_callback_query(call.id)
        user_states[call.from_user.id] = "awaiting_welcome_text"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings_welcome"))
        
        bot.edit_message_text(
            "‚úçÔ∏è *–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.message_handler(func=lambda msg: is_admin(msg.from_user.id) and user_states.get(msg.from_user.id) == "awaiting_welcome_text")
    def handle_welcome_text(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        text = message.text
        
        if len(text) > 1000:
            bot.send_message(message.chat.id, "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        set_setting('welcome_text', text)
        user_states.pop(message.from_user.id, None)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"))
        
        bot.send_message(
            message.chat.id,
            "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!",
            reply_markup=markup
        )
    
    
    @bot.callback_query_handler(func=lambda call: call.data == "welcome_change_media" and is_admin(call.from_user.id))
    def welcome_change_media_callback(call):
        """–ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        bot.answer_callback_query(call.id)
        user_states[call.from_user.id] = "awaiting_welcome_media"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings_welcome"))
        
        bot.edit_message_text(
            "üñº *–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ–¥–∏–∞*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.message_handler(content_types=['photo', 'video'], func=lambda msg: is_admin(msg.from_user.id) and user_states.get(msg.from_user.id) == "awaiting_welcome_media")
    def handle_welcome_media(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        if message.photo:
            file_id = message.photo[-1].file_id
            media_type = 'photo'
        elif message.video:
            file_id = message.video.file_id
            media_type = 'video'
        else:
            return
        
        set_setting('welcome_media_type', media_type)
        set_setting('welcome_media_id', file_id)
        user_states.pop(message.from_user.id, None)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"))
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ {media_type} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=markup
        )
    
    
    # ========== –†–ï–ö–í–ò–ó–ò–¢–´ –û–ü–õ–ê–¢–´ ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "settings_payment" and is_admin(call.from_user.id))
    def settings_payment_callback(call):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã"""
        bot.answer_callback_query(call.id)
        user_states[call.from_user.id] = "awaiting_payment_info"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_settings"))
        
        current = get_setting('payment_info', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
        
        bot.edit_message_text(
            f"üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã*\n\n"
            f"–¢–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n```\n{current}\n```\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.message_handler(func=lambda msg: is_admin(msg.from_user.id) and user_states.get(msg.from_user.id) == "awaiting_payment_info")
    def handle_payment_info(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã"""
        text = message.text
        
        if len(text) > 500:
            bot.send_message(message.chat.id, "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        set_setting('payment_info', text)
        user_states.pop(message.from_user.id, None)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"))
        
        bot.send_message(
            message.chat.id,
            "‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            reply_markup=markup
        )
    
    
    # ========== –ö–û–ù–¢–ê–ö–¢ –°–ê–ü–ü–û–†–¢–ê ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "settings_support" and is_admin(call.from_user.id))
    def settings_support_callback(call):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å–∞–ø–ø–æ—Ä—Ç–∞"""
        bot.answer_callback_query(call.id)
        user_states[call.from_user.id] = "awaiting_support_username"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_settings"))
        
        current = get_setting('support_username', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        
        bot.edit_message_text(
            f"ü™¨ *–ö–æ–Ω—Ç–∞–∫—Ç —Å–∞–ø–ø–æ—Ä—Ç–∞*\n\n"
            f"–¢–µ–∫—É—â–∏–π: @{current}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ username —Å–∞–ø–ø–æ—Ä—Ç–∞ (–±–µ–∑ @):",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.message_handler(func=lambda msg: is_admin(msg.from_user.id) and user_states.get(msg.from_user.id) == "awaiting_support_username")
    def handle_support_username(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ username —Å–∞–ø–ø–æ—Ä—Ç–∞"""
        username = message.text.strip().replace('@', '')
        
        if len(username) < 5 or len(username) > 32:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 5-32 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        set_setting('support_username', username)
        user_states.pop(message.from_user.id, None)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"))
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–∞–ø–ø–æ—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: @{username}",
            reply_markup=markup
        )
    
    
    # ========== –ü–†–û–°–ú–û–¢–† –í–°–ï–• –ù–ê–°–¢–†–û–ï–ö ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "settings_view_all" and is_admin(call.from_user.id))
    def settings_view_all_callback(call):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        bot.answer_callback_query(call.id)
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM bot_settings WHERE id = 1")
        settings = cursor.fetchone()
        conn.close()
        
        if settings:
            text = "üìä *–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:*\n\n"
            text += f"üõ† –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {get_setting('maintenance_mode', '0')}\n"
            text += f"ü§ñ –ö–∞–ø—á–∞: {get_setting('captcha_enabled', '0')}\n"
            text += f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {get_setting('welcome_text', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')[:50]}...\n"
            text += f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {get_setting('payment_info', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')[:50]}...\n"
            text += f"ü™¨ –°–∞–ø–ø–æ—Ä—Ç: @{get_setting('support_username', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n"
        else:
            text = "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings"))
        
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    # ========== –≠–ö–°–ü–û–†–¢ –ù–ê–°–¢–†–û–ï–ö ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "settings_export" and is_admin(call.from_user.id))
    def settings_export_callback(call):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        bot.answer_callback_query(call.id, "üíæ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞...")
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        export_data = {
            "exported_at": datetime.now().isoformat(),
            "bot_settings": {},
            "cities": [],
            "districts": [],
            "products": [],
            "inventory": [],
            "orders": [],
            "users": []
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        cursor.execute("SELECT * FROM bot_settings WHERE id = 1")
        settings = cursor.fetchone()
        if settings:
            export_data["bot_settings"] = {
                "maintenance_mode": get_setting('maintenance_mode', '0'),
                "captcha_enabled": get_setting('captcha_enabled', '0'),
                "welcome_text": get_setting('welcome_text', ''),
                "payment_info": get_setting('payment_info', ''),
                "support_username": get_setting('support_username', '')
            }
        
        # –ì–æ—Ä–æ–¥–∞
        cursor.execute("SELECT id, name FROM cities")
        export_data["cities"] = [{"id": r[0], "name": r[1]} for r in cursor.fetchall()]
        
        # –†–∞–π–æ–Ω—ã
        cursor.execute("SELECT id, city_id, name FROM districts")
        export_data["districts"] = [{"id": r[0], "city_id": r[1], "name": r[2]} for r in cursor.fetchall()]
        
        # –¢–æ–≤–∞—Ä—ã
        cursor.execute("SELECT id, name FROM products")
        export_data["products"] = [{"id": r[0], "name": r[1]} for r in cursor.fetchall()]
        
        # –ù–∞–ª–∏—á–∏–µ
        cursor.execute("SELECT id, product_id, city_id, district_id, weight_grams, price_rub, status FROM inventory")
        export_data["inventory"] = [{"id": r[0], "product_id": r[1], "city_id": r[2], "district_id": r[3], "weight": r[4], "price": r[5], "status": r[6]} for r in cursor.fetchall()]
        
        # –ó–∞–∫–∞–∑—ã
        cursor.execute("SELECT id, user_id, inventory_id, status, created_at FROM orders")
        export_data["orders"] = [{"id": r[0], "user_id": r[1], "inventory_id": r[2], "status": r[3], "created_at": r[4]} for r in cursor.fetchall()]
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cursor.execute("SELECT user_id, username, first_name, is_blocked FROM users")
        export_data["users"] = [{"id": r[0], "username": r[1], "name": r[2], "blocked": r[3]} for r in cursor.fetchall()]
        
        conn.close()
        
        # –°–æ–∑–¥–∞—ë–º JSON —Ñ–∞–π–ª
        json_data = json.dumps(export_data, ensure_ascii=False, indent=2)
        filename = f"bot_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(f"/tmp/{filename}", "w", encoding="utf-8") as f:
            f.write(json_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(f"/tmp/{filename}", "rb") as f:
            bot.send_document(
                call.message.chat.id,
                f,
                caption="üíæ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö\n\n‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!",
                visible_file_name=filename
            )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"))
        
        bot.send_message(
            call.message.chat.id,
            "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n‚Ä¢ –ì–æ—Ä–æ–¥–∞ –∏ —Ä–∞–π–æ–Ω—ã\n‚Ä¢ –¢–æ–≤–∞—Ä—ã\n‚Ä¢ –í–∏—Ç—Ä–∏–Ω—É\n‚Ä¢ –ó–∞–∫–∞–∑—ã\n‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=markup
        )
    
    
    # ========== –ò–ú–ü–û–†–¢ –ù–ê–°–¢–†–û–ï–ö ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "settings_import" and is_admin(call.from_user.id))
    def settings_import_callback(call):
        """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        bot.answer_callback_query(call.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–µ—Ö.—Ä–∞–±–æ—Ç
        maintenance = get_setting('maintenance_mode', '0')
        
        if maintenance != '1':
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –í–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Ö.—Ä–∞–±–æ—Ç –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º!", show_alert=True)
            return
        
        user_states[call.from_user.id] = "awaiting_import_file"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_settings"))
        
        bot.edit_message_text(
            "üì≤ *–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫*\n\n"
            "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n"
            "–ò–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.message_handler(content_types=['document'], func=lambda msg: is_admin(msg.from_user.id) and user_states.get(msg.from_user.id) == "awaiting_import_file")
    def handle_import_file(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∏–º–ø–æ—Ä—Ç–∞"""
        try:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            # –ü–∞—Ä—Å–∏–º JSON
            import_data = json.loads(downloaded_file.decode('utf-8'))
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if "bot_settings" in import_data:
                for key, value in import_data["bot_settings"].items():
                    set_setting(key, value)
            
            user_states.pop(message.from_user.id, None)
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"))
            
            bot.send_message(
                message.chat.id,
                "‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!\n\n–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                reply_markup=markup
            )
        except Exception as e:
            bot.send_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞."
            )
