#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
"""

import os
import sqlite3
from datetime import datetime
from telebot import types


DATABASE = os.getenv('DATABASE', 'bot.db')


def register_admin_settings_handlers(bot, user_states, user_data):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    
    ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))
    
    def is_admin(user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id == ADMIN_ID
    
    
    def get_setting(key, default=''):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π"""
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        try:
            # bot_settings –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏, –∞ –Ω–µ key-value
            cursor.execute(f"SELECT {key} FROM bot_settings WHERE id = 1")
            result = cursor.fetchone()
            conn.close()
            return str(result[0]) if result and result[0] is not None else default
        except Exception as e:
            conn.close()
            return default
    
    
    def set_setting(key, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π"""
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        try:
            # bot_settings –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏, –∞ –Ω–µ key-value
            cursor.execute(f"""
                UPDATE bot_settings 
                SET {key} = ?, updated_at = datetime('now')
                WHERE id = 1
            """, (value,))
            conn.commit()
        except Exception as e:
            pass
        finally:
            conn.close()
    
    
    # ========== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "admin_settings" and is_admin(call.from_user.id))
    def admin_settings_callback(call):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        bot.answer_callback_query(call.id, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
        show_settings_menu(call.message)
    
    
    def show_settings_menu(message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        maintenance = get_setting('maintenance_mode', '0')
        captcha = get_setting('captcha_enabled', '0')
        welcome_msg = get_setting('welcome_text', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
        
        text = f"""‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*

üîß *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*

üõ† –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á—ë–Ω' if maintenance == '1' else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}
ü§ñ –ö–∞–ø—á–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if captcha == '1' else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}
üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ

‚ö†Ô∏è *–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è* –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –±–æ—Ç—É. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.

ü§ñ *–ö–∞–ø—á–∞* —Ç—Ä–µ–±—É–µ—Ç –æ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞."""
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        # –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        if maintenance == '1':
            markup.add(types.InlineKeyboardButton(
                "üõ† –í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
                callback_data="setting_maintenance_off"
            ))
        else:
            markup.add(types.InlineKeyboardButton(
                "üõ† –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
                callback_data="setting_maintenance_on"
            ))
        
        # –ö–∞–ø—á–∞
        if captcha == '1':
            markup.add(types.InlineKeyboardButton(
                "ü§ñ –í—ã–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É",
                callback_data="setting_captcha_off"
            ))
        else:
            markup.add(types.InlineKeyboardButton(
                "ü§ñ –í–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É",
                callback_data="setting_captcha_on"
            ))
        
        markup.add(
            types.InlineKeyboardButton("üëã –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="setting_welcome"),
            types.InlineKeyboardButton("üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã", callback_data="setting_payment"),
            types.InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", callback_data="settings_view_all"),
            types.InlineKeyboardButton("‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        )
        
        bot.edit_message_text(
            text,
            message.chat.id,
            message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    # ========== –†–ï–ñ–ò–ú –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "setting_maintenance_on" and is_admin(call.from_user.id))
    def maintenance_on_callback(call):
        """–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        set_setting('maintenance_mode', '1')
        bot.answer_callback_query(call.id, "‚úÖ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤–∫–ª—é—á—ë–Ω")
        show_settings_menu(call.message)
    
    
    @bot.callback_query_handler(func=lambda call: call.data == "setting_maintenance_off" and is_admin(call.from_user.id))
    def maintenance_off_callback(call):
        """–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        set_setting('maintenance_mode', '0')
        bot.answer_callback_query(call.id, "‚úÖ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω")
        show_settings_menu(call.message)
    
    
    # ========== –ö–ê–ü–ß–ê ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "setting_captcha_on" and is_admin(call.from_user.id))
    def captcha_on_callback(call):
        """–í–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É"""
        set_setting('captcha_enabled', '1')
        bot.answer_callback_query(call.id, "‚úÖ –ö–∞–ø—á–∞ –≤–∫–ª—é—á–µ–Ω–∞")
        show_settings_menu(call.message)
    
    
    @bot.callback_query_handler(func=lambda call: call.data == "setting_captcha_off" and is_admin(call.from_user.id))
    def captcha_off_callback(call):
        """–í—ã–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É"""
        set_setting('captcha_enabled', '0')
        bot.answer_callback_query(call.id, "‚úÖ –ö–∞–ø—á–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
        show_settings_menu(call.message)
    
    
    # ========== –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "setting_welcome" and is_admin(call.from_user.id))
    def welcome_setting_callback(call):
        """–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        bot.answer_callback_query(call.id)
        user_states[call.from_user.id] = "setting_welcome_message"
        
        current = get_setting('welcome_text', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_settings"))
        
        bot.edit_message_text(
            f"üëã *–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n"
            f"–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
            f"```\n{current}\n```\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.message_handler(func=lambda message: is_admin(message.from_user.id) and user_states.get(message.from_user.id) == "setting_welcome_message")
    def handle_welcome_message(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = message.text
        
        if len(text) < 5 or len(text) > 500:
            bot.send_message(
                message.chat.id,
                "‚ùå –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        set_setting('welcome_message', text)
        user_states.pop(message.from_user.id, None)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings"))
        
        bot.send_message(
            message.chat.id,
            "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=markup
        )
    
    
    # ========== –†–ï–ö–í–ò–ó–ò–¢–´ –û–ü–õ–ê–¢–´ ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "setting_payment" and is_admin(call.from_user.id))
    def payment_setting_callback(call):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã"""
        bot.answer_callback_query(call.id)
        user_states[call.from_user.id] = "setting_payment_details"
        
        current = get_setting('payment_details', '–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_settings"))
        
        bot.edit_message_text(
            f"üí∞ *–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã*\n\n"
            f"–¢–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
            f"```\n{current}\n```\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    @bot.message_handler(func=lambda message: is_admin(message.from_user.id) and user_states.get(message.from_user.id) == "setting_payment_details")
    def handle_payment_details(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã"""
        text = message.text
        
        if len(text) < 10 or len(text) > 1000:
            bot.send_message(
                message.chat.id,
                "‚ùå –î–ª–∏–Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        set_setting('payment_details', text)
        user_states.pop(message.from_user.id, None)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings"))
        
        bot.send_message(
            message.chat.id,
            "‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            reply_markup=markup
        )
    
    
    # ========== –ü–†–û–°–ú–û–¢–† –í–°–ï–• –ù–ê–°–¢–†–û–ï–ö ==========
    
    @bot.callback_query_handler(func=lambda call: call.data == "settings_view_all" and is_admin(call.from_user.id))
    def settings_view_all_callback(call):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        bot.answer_callback_query(call.id)
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # bot_settings –∏–º–µ–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        cursor.execute("""
            SELECT captcha_enabled, maintenance_mode, welcome_text, 
                   welcome_media_type, payment_instructions, support_username, updated_at
            FROM bot_settings
            WHERE id = 1
        """)
        result = cursor.fetchone()
        conn.close()
        
        if not result:
            text = "üìä *–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
        else:
            captcha, maintenance, welcome, media_type, payment, support, updated = result
            
            text = "üìä *–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
            text += f"‚Ä¢ `captcha_enabled`: {'‚úÖ –î–∞' if captcha else '‚ùå –ù–µ—Ç'}\n"
            text += f"‚Ä¢ `maintenance_mode`: {'‚úÖ –î–∞' if maintenance else '‚ùå –ù–µ—Ç'}\n"
            text += f"‚Ä¢ `welcome_text`: {(welcome[:30] + '...') if welcome and len(welcome) > 30 else (welcome or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n"
            text += f"‚Ä¢ `welcome_media_type`: {media_type or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            text += f"‚Ä¢ `payment_instructions`: {(payment[:30] + '...') if payment and len(payment) > 30 else (payment or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')}\n"
            text += f"‚Ä¢ `support_username`: {support or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            if updated:
                text += f"\nüìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.fromisoformat(updated).strftime('%d.%m.%Y %H:%M')}\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings"))
        
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
    
    
    # ========== HELPER –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –†–ï–ñ–ò–ú–ê –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø ==========
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ middleware –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    # telebot.apihelper.ENABLE_MIDDLEWARE = True –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–æ—Ç–∞
    # –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ middleware
